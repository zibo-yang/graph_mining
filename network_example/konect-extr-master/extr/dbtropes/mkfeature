#! /usr/bin/perl
#
# Extract features from dbtropes.nt file based on its structure. 
#
# INPUT FILES 
#	dbtropes.nt
#
# OUTPUT FILES 
#	dbtropes-feature.txt
#		May contain duplicates
# 

use strict;
use warnings; 

my $resource_uri = "<http://dbtropes.org/resource/";
my $has_feature_uri = 
    "<http://skipforward.net/skipforward/resource/seeder/skipinions/hasFeature>";
my $type_uri = "<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>";

my $input_filename  = 'dbtropes.nt';
my $output_filename = 'dbtropes-feature.txt';

# Format: key=feature id (as part of URI), values=resource that has
# the key as feature 
my %has_feature_map;

# Format: key=feature id (as part of URI), values=resource that are
# the RDF type of the feature   
my %type_map;


# Open file for writing
open(my $output_fh, '>', $output_filename) or die "Could not open file '$output_filename' $!";

# Open file for reading
open my $input_fh, '<', $input_filename or die "Cannot open $input_filename: $!";

while (my $line = <$input_fh>) {
	chomp $line;

	# Get subject 
	my $subject = $line;
 	$subject =~ s/^$resource_uri//;
 	$subject =~ s/>.*//;
		
	# Get object 
	my $object=$line;
	$object =~ s/.*$resource_uri//;
 	$object =~ s/>.*//;

	if ($line =~ /$has_feature_uri/) {
		# Store into hashmap	
		if (exists $has_feature_map{$object}) {
			die "File contains multiple references on the same fature_iD: $object\n";
		} else {
			# Write out the information if the type is already known
			if (exists $type_map{$object}) {
			    # Write mapping to file
			    print_line("$subject\t$type_map{$object}");
			} else {
				# Store the has_feature mapping if the type is not yet known
				$has_feature_map{$object} = $subject;
			}
		}
		
	}
	
	# Get type mappings
	if ($line =~ /$type_uri/ && index($subject,'/int_') != -1) {
		# Write type to type_map
		if (not exists $type_map{$subject}) {
			$type_map{$subject} = $object;
		}
		if (exists $has_feature_map{$subject}) {
			# Write mapping to file
			print_line("$has_feature_map{$subject}\t$object");	
			# Delete from features_map
			delete $has_feature_map{$subject};	
			
		}
	}
}

close $output_fh or die "$!";

# Check if all feature IDs have been mapped to their types
my $feature_map_size = keys %has_feature_map;
if ($feature_map_size > 0){
	my @features_entries = keys %has_feature_map;
	for my $features_entry (@features_entries) {
		die "type not defined for key: $features_entry\n";
	}
}

sub print_line{
	print $output_fh "@_\n";
}
